"use strict";function factorialBlockMaker(a){var o=1<arguments.length&&void 0!==arguments[1]&&arguments[1],t=document.createElement("dl");return t.classList.add("factorial-block--new"),o?(t.classList.add("factorial-block__initial-call"),t.innerHTML='<dt class="factorial-block__call-type factorial-block__top-row">Initial Call</dt>\n                                    <dd class="factorial-block__function-name factorial-block__bottom-row">factorial('+a+')</dd>\n                                    <dt class="factorial-block__equivalent factorial-block__top-row">equivalent to</dt>\n                                    <dd class="factorial-block__equivalent-value factorial-block__bottom-row">'+a+" * factorial("+(a-1)+')</dd>\n                                    <dt class="factorial-block__return-header factorial-block__top-row">return value</dt>\n                                    <dd class="factorial-block__return-value factorial-block__bottom-row">waiting</dd>'):t.innerHTML=1==a?'<dt class="factorial-block__call-type factorial-block__top-row">Base Case</dt>\n                                    <dd class="factorial-block__function-name factorial-block__bottom-row">factorial(1)</dd>\n                                    <dt class="factorial-block__equivalent factorial-block__top-row">equivalent to</dt>\n                                    <dd class="factorial-block__equivalent-value factorial-block__bottom-row">1</dd>\n                                    <dt class="factorial-block__return-header factorial-block__top-row">return value</dt>\n                                    <dd class="factorial-block__return-value factorial-block__return-value--returned factorial-block__bottom-row">1</dd>':'<dt class="factorial-block__call-type factorial-block__top-row">Recursive Call</dt>\n                                    <dd class="factorial-block__function-name factorial-block__bottom-row">factorial('+a+')</dd>\n                                    <dt class="factorial-block__equivalent factorial-block__top-row">equivalent to</dt>\n                                    <dd class="factorial-block__equivalent-value factorial-block__bottom-row">'+a+" * factorial("+(a-1)+')</dd>\n                                    <dt class="factorial-block__return-header factorial-block__top-row">return value</dt>\n                                    <dd class="factorial-block__return-value factorial-block__bottom-row">waiting</dd>',t}var factorialDemoContainer=document.querySelector(".factorial-demo");function factorial(l){return new Promise(function(t){setTimeout(function(){var a=void 0;a=factorialDemoContainer.hasChildNodes()?factorialBlockMaker(l,!1):factorialBlockMaker(l,!0),factorialDemoContainer.appendChild(a);var o=a.querySelector(".factorial-block__return-value");t(o)},500)}).then(function(t){return l<=1?Promise.resolve(1):new Promise(function(a){a(factorial(l-1).then(function(a){return a*l}))}).then(function(o){return new Promise(function(a){setTimeout(function(){t.innerHTML=o.toString(),t.classList.add("factorial-block__return-value--returned"),a(o)},500)})})})}factorial(5);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZhY3RvcmlhbC5qcyJdLCJuYW1lcyI6WyJmYWN0b3JpYWxCbG9ja01ha2VyIiwibiIsImlzRmlyc3RDYWxsIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiZmFjdG9yaWFsQmxvY2siLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc0xpc3QiLCJpbm5lckhUTUwiLCJmYWN0b3JpYWxEZW1vQ29udGFpbmVyIiwiZnVuY3Rpb25WYWx1ZVRleHQiLCJxdWVyeVNlbGVjdG9yIiwiZmFjdG9yaWFsIiwiUHJvbWlzZSIsInJlc29sdmUiLCJzZXRUaW1lb3V0IiwiaGFzQ2hpbGROb2RlcyIsImFwcGVuZENoaWxkIiwidGhlbiIsInZhbHVlIiwidmFsIiwidG9TdHJpbmciLCJhZGQiXSwibWFwcGluZ3MiOiJhQUFBLFNBQVNBLG9CQUFvQkMsR0FBd0IsSUFBckJDLEVBQXFCLEVBQUFDLFVBQUFDLGFBQUFDLElBQUFGLFVBQUEsSUFBQUEsVUFBQSxHQUM3Q0csRUFBaUJDLFNBQVNDLGNBQWMsTUF1Q3BDLE9BeENaRixFQUFTTixVQUFvQkMsSUFBd0Isd0JBSTdDQyxHQUhBSSxFQUFBQSxVQUFpQkMsSUFBU0MsaUNBQzlCRixFQUFlRyxVQUFmSCwyTUFLbUhMLEVBTG5ISyxrUEFHSUwsRUFISkssaUJBR0lMLEVBQUEsR0FISkssNlBBVU9BLEVBT0FJLFVBTkhKLEdBQUFBLEVBREcsbXRCQW1CTEssNk1BVmlIVixFQVVqSFUsa1BBRzhCVixFQUg5QlUsaUJBRzhCVixFQUFBLEdBSDlCVSw0UEFTTUwsRUFHUCxJQVRNSyx1QkFTRUMsU0FBREMsY0FBdUIsbUJBRXZCLFNBQUFDLFVBQU9DLEdBQ1YsT0FGRCxJQUVPQSxRQUFBLFNBQUFDLEdBQ0hDLFdBQU8sV0FDSCxJQUFBWCxPQUFBQSxFQUFZQSxFQUFzQkssdUJBQUFPLGdCQUFsQ2xCLG9CQUFBQyxHQUFBLEdBQWtDRCxvQkFBQUMsR0FBQSxHQUNsQ2UsdUJBQUFHLFlBQUFiLEdBQ0gsSUFBRWMsRUFBS2QsRUFBV08sY0FBQSxrQ0FDZkcsRUFBQUosSUFDSUssT0FDSUwsS0FBQUEsU0FBQUEsR0FDQUEsT0FBQUEsR0FBQUEsRUFDQUksUUFBQUEsUUFBUUssR0FKaEIsSUFBQU4sUUFBQSxTQUFBQyxHQVFQQSxFQVpHRixVQUFBYixFQUFBLEdBQUFtQixLQUFBLFNBQUFFLEdBQUEsT0FBQUEsRUFBQXJCLE9BYlJtQixLQUFBLFNBQUFDLEdBMkJILE9BQUEsSUFBQU4sUUFBQSxTQUFBQyxHQVRtQkMsV0FBVyxXQVcvQkwsRUFBQUYsVUFBQVcsRUFBQUUsV0FUd0JYLEVBQWtCSCxVQUFVZSxJQUFJLDJDQUNoQ1IsRUFBUUssSUFDVCxXQU92QlAsVUFBVSIsImZpbGUiOiJmYWN0b3JpYWwubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gZmFjdG9yaWFsQmxvY2tNYWtlcihuLCBpc0ZpcnN0Q2FsbCA9IGZhbHNlKSB7XHJcbiAgICBsZXQgZmFjdG9yaWFsQmxvY2sgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkbCcpO1xyXG4gICAgZmFjdG9yaWFsQmxvY2suY2xhc3NMaXN0LmFkZCgnZmFjdG9yaWFsLWJsb2NrLS1uZXcnKTtcclxuXHJcbiAgICBpZiAoaXNGaXJzdENhbGwpIHtcclxuICAgICAgICBmYWN0b3JpYWxCbG9jay5jbGFzc0xpc3QuYWRkKCdmYWN0b3JpYWwtYmxvY2tfX2luaXRpYWwtY2FsbCcpO1xyXG4gICAgICAgIGZhY3RvcmlhbEJsb2NrLmlubmVySFRNTCA9IGA8ZHQgY2xhc3M9XCJmYWN0b3JpYWwtYmxvY2tfX2NhbGwtdHlwZSBmYWN0b3JpYWwtYmxvY2tfX3RvcC1yb3dcIj5Jbml0aWFsIENhbGw8L2R0PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGQgY2xhc3M9XCJmYWN0b3JpYWwtYmxvY2tfX2Z1bmN0aW9uLW5hbWUgZmFjdG9yaWFsLWJsb2NrX19ib3R0b20tcm93XCI+ZmFjdG9yaWFsKCR7bn0pPC9kZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGR0IGNsYXNzPVwiZmFjdG9yaWFsLWJsb2NrX19lcXVpdmFsZW50IGZhY3RvcmlhbC1ibG9ja19fdG9wLXJvd1wiPmVxdWl2YWxlbnQgdG88L2R0PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGQgY2xhc3M9XCJmYWN0b3JpYWwtYmxvY2tfX2VxdWl2YWxlbnQtdmFsdWUgZmFjdG9yaWFsLWJsb2NrX19ib3R0b20tcm93XCI+JHtufSAqIGZhY3RvcmlhbCgke24gLSAxfSk8L2RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZHQgY2xhc3M9XCJmYWN0b3JpYWwtYmxvY2tfX3JldHVybi1oZWFkZXIgZmFjdG9yaWFsLWJsb2NrX190b3Atcm93XCI+cmV0dXJuIHZhbHVlPC9kdD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRkIGNsYXNzPVwiZmFjdG9yaWFsLWJsb2NrX19yZXR1cm4tdmFsdWUgZmFjdG9yaWFsLWJsb2NrX19ib3R0b20tcm93XCI+d2FpdGluZzwvZGQ+YDtcclxuICAgIH0gZWxzZSBpZiAobiA9PSAxKSB7XHJcbiAgICAgICAgZmFjdG9yaWFsQmxvY2suaW5uZXJIVE1MID0gYDxkdCBjbGFzcz1cImZhY3RvcmlhbC1ibG9ja19fY2FsbC10eXBlIGZhY3RvcmlhbC1ibG9ja19fdG9wLXJvd1wiPkJhc2UgQ2FzZTwvZHQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkZCBjbGFzcz1cImZhY3RvcmlhbC1ibG9ja19fZnVuY3Rpb24tbmFtZSBmYWN0b3JpYWwtYmxvY2tfX2JvdHRvbS1yb3dcIj5mYWN0b3JpYWwoMSk8L2RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZHQgY2xhc3M9XCJmYWN0b3JpYWwtYmxvY2tfX2VxdWl2YWxlbnQgZmFjdG9yaWFsLWJsb2NrX190b3Atcm93XCI+ZXF1aXZhbGVudCB0bzwvZHQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkZCBjbGFzcz1cImZhY3RvcmlhbC1ibG9ja19fZXF1aXZhbGVudC12YWx1ZSBmYWN0b3JpYWwtYmxvY2tfX2JvdHRvbS1yb3dcIj4xPC9kZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGR0IGNsYXNzPVwiZmFjdG9yaWFsLWJsb2NrX19yZXR1cm4taGVhZGVyIGZhY3RvcmlhbC1ibG9ja19fdG9wLXJvd1wiPnJldHVybiB2YWx1ZTwvZHQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkZCBjbGFzcz1cImZhY3RvcmlhbC1ibG9ja19fcmV0dXJuLXZhbHVlIGZhY3RvcmlhbC1ibG9ja19fcmV0dXJuLXZhbHVlLS1yZXR1cm5lZCBmYWN0b3JpYWwtYmxvY2tfX2JvdHRvbS1yb3dcIj4xPC9kZD5gO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBmYWN0b3JpYWxCbG9jay5pbm5lckhUTUwgPSBgPGR0IGNsYXNzPVwiZmFjdG9yaWFsLWJsb2NrX19jYWxsLXR5cGUgZmFjdG9yaWFsLWJsb2NrX190b3Atcm93XCI+UmVjdXJzaXZlIENhbGw8L2R0PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGQgY2xhc3M9XCJmYWN0b3JpYWwtYmxvY2tfX2Z1bmN0aW9uLW5hbWUgZmFjdG9yaWFsLWJsb2NrX19ib3R0b20tcm93XCI+ZmFjdG9yaWFsKCR7bn0pPC9kZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGR0IGNsYXNzPVwiZmFjdG9yaWFsLWJsb2NrX19lcXVpdmFsZW50IGZhY3RvcmlhbC1ibG9ja19fdG9wLXJvd1wiPmVxdWl2YWxlbnQgdG88L2R0PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGQgY2xhc3M9XCJmYWN0b3JpYWwtYmxvY2tfX2VxdWl2YWxlbnQtdmFsdWUgZmFjdG9yaWFsLWJsb2NrX19ib3R0b20tcm93XCI+JHtufSAqIGZhY3RvcmlhbCgke24gLSAxfSk8L2RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZHQgY2xhc3M9XCJmYWN0b3JpYWwtYmxvY2tfX3JldHVybi1oZWFkZXIgZmFjdG9yaWFsLWJsb2NrX190b3Atcm93XCI+cmV0dXJuIHZhbHVlPC9kdD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRkIGNsYXNzPVwiZmFjdG9yaWFsLWJsb2NrX19yZXR1cm4tdmFsdWUgZmFjdG9yaWFsLWJsb2NrX19ib3R0b20tcm93XCI+d2FpdGluZzwvZGQ+YDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZmFjdG9yaWFsQmxvY2s7XHJcbn1cclxuXHJcbmNvbnN0IGZhY3RvcmlhbERlbW9Db250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZmFjdG9yaWFsLWRlbW8nKTtcclxuXHJcbmZ1bmN0aW9uIGZhY3RvcmlhbChuKSB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgbGV0IGZhY3RvcmlhbEJsb2NrO1xyXG4gICAgICAgICAgICBpZiAoIWZhY3RvcmlhbERlbW9Db250YWluZXIuaGFzQ2hpbGROb2RlcygpKSBmYWN0b3JpYWxCbG9jayA9IGZhY3RvcmlhbEJsb2NrTWFrZXIobiwgdHJ1ZSk7IFxyXG4gICAgICAgICAgICBlbHNlIGZhY3RvcmlhbEJsb2NrID0gZmFjdG9yaWFsQmxvY2tNYWtlcihuLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIGZhY3RvcmlhbERlbW9Db250YWluZXIuYXBwZW5kQ2hpbGQoZmFjdG9yaWFsQmxvY2spO1xyXG4gICAgICAgICAgICBsZXQgZnVuY3Rpb25WYWx1ZVRleHQgPSBmYWN0b3JpYWxCbG9jay5xdWVyeVNlbGVjdG9yKCcuZmFjdG9yaWFsLWJsb2NrX19yZXR1cm4tdmFsdWUnKTtcclxuICAgICAgICAgICAgcmVzb2x2ZShmdW5jdGlvblZhbHVlVGV4dCk7XHJcbiAgICAgICAgfSwgNTAwKTtcclxuICAgIH0pLnRoZW4oKGZ1bmN0aW9uVmFsdWVUZXh0KSA9PiB7XHJcbiAgICAgICAgaWYgKG4gPD0gMSkge1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKDEpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlID0gZmFjdG9yaWFsKG4gLSAxKS50aGVuKCh2YWwpID0+IHZhbCAqIG4pO1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZSh2YWx1ZSk7XHJcbiAgICAgICAgICAgIH0pLnRoZW4oKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb25WYWx1ZVRleHQuaW5uZXJIVE1MID0gdmFsdWUudG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb25WYWx1ZVRleHQuY2xhc3NMaXN0LmFkZCgnZmFjdG9yaWFsLWJsb2NrX19yZXR1cm4tdmFsdWUtLXJldHVybmVkJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUodmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIDUwMCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSlcclxufVxyXG5cclxuZmFjdG9yaWFsKDUpO1xyXG5cclxuIl19
